import React, { useState, useEffect, useRef } from 'react';

function CounterGame() {
  // üî¢ ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  const [count, setCount] = useState(0);

  // ‚ñ∂ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Å‡∏° (‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô / ‡∏´‡∏¢‡∏∏‡∏î)
  const [isRunning, setIsRunning] = useState(false);

  // ‚è≥ ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠ (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
  const [timeLeft, setTimeLeft] = useState(30);

  // üß© ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏•‡πÄ‡∏ß‡∏•
  const [level, setLevel] = useState(1);

  // üèÜ ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å localStorage)
  const [highScore, setHighScore] = useState(
    () => parseInt(localStorage.getItem('highScore')) || 0
  );

  // üî• ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á (Click Streak)
  const [clickStreak, setClickStreak] = useState(0);

  // ‚ú® ‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏≠‡∏±‡∏õ
  const [levelUpEffect, setLevelUpEffect] = useState(false);

  // ‚è± ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤ timer (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå interval ‡πÑ‡∏î‡πâ)
  const timerRef = useRef(null);

  /* =========================
     üéÆ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà
  ========================== */
  const startGame = () => {
    setIsRunning(true);
    setCount(0);
    setLevel(1);
    setClickStreak(0);
    setTimeLeft(30);
    setLevelUpEffect(false);

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ timer ‡πÄ‡∏î‡∏¥‡∏° ‡πÉ‡∏´‡πâ‡∏•‡πâ‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô
    if (timerRef.current) clearInterval(timerRef.current);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á timer ‡πÉ‡∏´‡∏°‡πà
    timerRef.current = setInterval(() => {
      setTimeLeft((prev) => {
        if (prev <= 1) {
          clearInterval(timerRef.current);
          stopGame(); // ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤ = ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏Å‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
          return 0;
        }
        return prev - 1;
      });
    }, 1000);
  };

  /* =========================
     üëÜ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
  ========================== */
  const clickButton = () => {
    if (!isRunning) return;

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤ streak
    const newStreak = clickStreak + 1;
    setClickStreak(newStreak);

    let bonus = 0;

    // üéÅ ‡∏ó‡∏∏‡∏Å 5 ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô = ‡πÇ‡∏ö‡∏ô‡∏±‡∏™ +5 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
    if (newStreak % 5 === 0) {
      bonus = 5;
    }

    const newCount = count + 1 + bonus;
    setCount(newCount);

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡πÉ‡∏´‡∏°‡πà
    const newLevel = Math.floor(newCount / 10) + 1;

    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏° ‚Üí ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå
    if (newLevel > level) {
      setLevelUpEffect(true);
      setTimeout(() => setLevelUpEffect(false), 1000);
    }

    setLevel(newLevel);
  };

  /* =========================
     ‚èπ ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏Å‡∏° (‡∏ó‡∏±‡πâ‡∏á‡∏Å‡∏î‡πÄ‡∏≠‡∏á ‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤)
  ========================== */
  const stopGame = () => {
    setIsRunning(false);
    clearInterval(timerRef.current);

    // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏µ‡πâ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î ‚Üí ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï high score
    if (count > highScore) {
      setHighScore(count);
      localStorage.setItem('highScore', count);
    }
  };

  /* =========================
     üßπ ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå timer ‡πÄ‡∏°‡∏∑‡πà‡∏≠ component ‡∏ñ‡∏π‡∏Å unmount
  ========================== */
  useEffect(() => {
    return () => clearInterval(timerRef.current);
  }, []);

  return (
    <div style={styles.container}>
      <h1 style={styles.title}>‚ö° Counter Game</h1>

      {/* üîπ ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡∏° */}
      <div style={styles.stats}>
        <p>‚è≥ ‡πÄ‡∏ß‡∏•‡∏≤: {timeLeft} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ</p>
        <p>‚≠ê ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: {count}</p>
        <p>üî• ‡πÄ‡∏•‡πÄ‡∏ß‡∏•: {level}</p>
        <p>üí• ‡∏™‡∏ï‡∏£‡∏µ‡∏Ñ‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á: {clickStreak}</p>
        <p>üèÜ ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: {highScore}</p>
      </div>

      {/* üîπ ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° */}
      <div style={styles.buttons}>
        {!isRunning ? (
          <button style={styles.startBtn} onClick={startGame}>
            ‚ñ∂ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°
          </button>
        ) : (
          <button style={styles.clickBtn} onClick={clickButton}>
            +1 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
          </button>
        )}
      </div>

      {/* üîπ ‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏Å‡∏° */}
      {isRunning && (
        <button style={styles.stopBtn} onClick={stopGame}>
          ‚èπ ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏Å‡∏°
        </button>
      )}

      {/* ‚ú® ‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏≠‡∏±‡∏õ */}
      {levelUpEffect && (
        <div style={styles.levelUpEffect}>üéâ Level Up! üéâ</div>
      )}

      {/* üîç Debug Info */}
      <div style={styles.debugBox}>
        <h3>üß© Debug Info</h3>
        <pre>
          {JSON.stringify(
            { count, timeLeft, isRunning, level, highScore, clickStreak },
            null,
            2
          )}
        </pre>
      </div>
    </div>
  );
}

/* =========================
   üé® ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πÑ‡∏ï‡∏•‡πå
========================= */
const styles = {
  container: {
    textAlign: 'center',
    background: 'rgba(255, 255, 255, 0.2)',
    borderRadius: '16px',
    padding: '20px',
    color: 'white',
    maxWidth: '400px',
    margin: '0 auto',
    backdropFilter: 'blur(10px)',
    position: 'relative',
  },
  title: {
    fontSize: '2rem',
    marginBottom: '20px',
  },
  stats: {
    marginBottom: '20px',
    fontSize: '1.2rem',
    lineHeight: '1.6',
  },
  buttons: {
    marginBottom: '20px',
  },
  startBtn: {
    background: '#4CAF50',
    color: 'white',
    border: 'none',
    padding: '12px 24px',
    fontSize: '1.2rem',
    borderRadius: '10px',
    cursor: 'pointer',
  },
  clickBtn: {
    background: '#ffca28',
    color: '#333',
    border: 'none',
    padding: '12px 24px',
    fontSize: '1.2rem',
    borderRadius: '10px',
    cursor: 'pointer',
  },
  stopBtn: {
    background: '#e74c3c',
    color: 'white',
    border: 'none',
    padding: '10px 20px',
    fontSize: '1rem',
    borderRadius: '8px',
    cursor: 'pointer',
  },
  levelUpEffect: {
    position: 'absolute',
    top: '40%',
    left: '50%',
    transform: 'translate(-50%, -50%)',
    fontSize: '2rem',
    color: '#fff',
    animation: 'pop 1s ease-out',
    textShadow: '0 0 10px gold, 0 0 20px orange',
  },
  debugBox: {
    background: 'rgba(0, 0, 0, 0.4)',
    borderRadius: '8px',
    padding: '10px',
    marginTop: '20px',
    fontSize: '0.9rem',
    textAlign: 'left',
  },
};

export default CounterGame;
