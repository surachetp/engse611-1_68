const express = require('express');
const router = express.Router();
const { readJsonFile } = require('../utils/fileManager');

/**
 * ‚úÖ Utility: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢ (XSS)
 * ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£ inject script ‡∏à‡∏≤‡∏Å query string
 */
const hasDangerousCharacters = (str) => {
  const dangerousPatterns = /<script|<iframe|javascript:|onerror=|onclick=/i;
  return dangerousPatterns.test(str);
};

// ========================================
// GET /api/restaurants - ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏û‡∏£‡πâ‡∏≠‡∏° filtering)
// ========================================
router.get('/', async (req, res) => {
  try {
    let restaurants = await readJsonFile('restaurants.json');
    const { search, category, minRating, priceRange } = req.query;

    // üõ°Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Ç‡∏≠‡∏á query
    for (const key of Object.keys(req.query)) {
      if (hasDangerousCharacters(req.query[key])) {
        return res.status(400).json({
          success: false,
          message: `‡∏û‡∏ö‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡πÑ‡∏°‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÉ‡∏ô‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå "${key}"`,
        });
      }
    }

    // ‚úÖ TODO 1: ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢ (search)
    if (search) {
      const searchLower = search.toLowerCase();
      restaurants = restaurants.filter(
        (r) =>
          r.name.toLowerCase().includes(searchLower) ||
          r.description.toLowerCase().includes(searchLower)
      );
    }

    // ‚úÖ TODO 2: ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (category)
    if (category) {
      const categoryLower = category.toLowerCase();
      restaurants = restaurants.filter(
        (r) => r.category.toLowerCase() === categoryLower
      );
    }

    // ‚úÖ TODO 3: ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏° rating ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ (minRating)
    if (minRating) {
      const min = parseFloat(minRating);
      restaurants = restaurants.filter(
        (r) => parseFloat(r.averageRating || 0) >= min
      );
    }

    // ‚úÖ TODO 4: ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤ (priceRange)
    if (priceRange) {
      const price = parseInt(priceRange);
      restaurants = restaurants.filter(
        (r) => parseInt(r.priceRange) === price
      );
    }

    // ‚úÖ ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if (restaurants.length === 0) {
      return res.json({
        success: true,
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤',
        data: [],
        total: 0,
      });
    }

    // ‚úÖ ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö
    res.json({
      success: true,
      total: restaurants.length,
      filters: { search, category, minRating, priceRange },
      data: restaurants,
    });
  } catch (error) {
    console.error('Error fetching restaurants:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô',
    });
  }
});

// ========================================
// GET /api/restaurants/:id - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏ï‡∏≤‡∏° ID ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏µ‡∏ß‡∏¥‡∏ß
// ========================================
router.get('/:id', async (req, res) => {
  try {
    const { id } = req.params;

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ id ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    if (isNaN(id)) {
      return res.status(400).json({
        success: false,
        message: '‡∏£‡∏´‡∏±‡∏™‡∏£‡πâ‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
      });
    }

    // ‚úÖ TODO 5: ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡∏ß‡∏¥‡∏ß
    const restaurants = await readJsonFile('restaurants.json');
    const reviews = await readJsonFile('reviews.json');

    // ‚úÖ ‡∏´‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ id ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
    const restaurant = restaurants.find((r) => r.id === parseInt(id));

    if (!restaurant) {
      return res.status(404).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ô‡∏µ‡πâ',
      });
    }

    // ‚úÖ ‡∏´‡∏≤‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏ô‡∏µ‡πâ
    let restaurantReviews = reviews.filter(
      (r) => r.restaurantId === parseInt(id)
    );

    // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏à‡∏≤‡∏Å‡πÉ‡∏´‡∏°‡πà‡∏™‡∏∏‡∏î‡πÑ‡∏õ‡πÄ‡∏Å‡πà‡∏≤‡∏™‡∏∏‡∏î
    restaurantReviews.sort(
      (a, b) => new Date(b.createdAt) - new Date(a.createdAt)
    );

    // ‚úÖ ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö
    res.json({
      success: true,
      data: {
        ...restaurant,
        reviews: restaurantReviews,
      },
    });
  } catch (error) {
    console.error('Error fetching restaurant:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô',
    });
  }
});

module.exports = router;
